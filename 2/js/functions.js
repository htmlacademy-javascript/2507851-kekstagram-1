//1 Функция для проверки, является ли строка палиндромом.
// Палиндром — это слово или фраза, которые одинаково читаются и слева направо и справа налево.
let palindrome = (str) => {
  str = str
    .toString()
    .toLowerCase()
    .replaceAll(' ', '');
  return str === str.split("").reverse().join("");
};
palindrome('топот'); // true
// Несмотря на разный регистр, тоже палиндром
palindrome('ДовОд'); // true
// Это не палиндром
palindrome('Кекс'); //

// Если хотите усложнить задание, предусмотрите случай, когда в строке встречаются пробелы.
// Они не должны учитываться при проверке!
palindrome('Лёша на полке клопа нашёл ');// true

//2 Функция, которая принимает строку, извлекает содержащиеся в ней цифры от 0 до 9 и возвращает их в виде целого положительного числа.
// Если в строке нет ни одной цифры, функция должна вернуть NaN:
const convertToNumber = (string) => {
  if (typeof string === 'number') {
    return string;
  }

  let result = '';
  for(let i = 0; i < string.length; i ++) {
    if (!Number.isNaN(parseInt(string.at(i),10))) {
      result += string.at(i);
    }
  }
  return parseInt(result, 10);
};
convertToNumber('2023 год');
// имяФункции('2023 год');// 2023
// имяФункции('ECMAScript 2022');// 2022
// имяФункции('1 кефир, 0.5 батона'); // 105
// имяФункции('агент 007');// 7
// имяФункции('а я томат');


//3  Функция для проверки длины строки. Она принимает строку, которую нужно проверить, 
// и максимальную длину и возвращает true, если строка меньше или равна указанной длине, 
// и false, если строка длиннее. Эта функция нам пригодится для валидации формы.

const isLessOrEquall = (string, length) => {
  return string.length <= length;
};

isLessOrEquall('проверяемая строка', 20); // true
// Длина строки ровно 18 символов
isLessOrEquall('проверяемая строка', 18); // true
// Строка длиннее 10 символов
isLessOrEquall('проверяемая строка', 10);

// 4 Функция, которая принимает три параметра: 
// исходную строку, минимальную длину и строку с добавочными символами — 
// и возвращает исходную строку, дополненную указанными символами до заданной длины. 
// Символы добавляются в начало строки. Если исходная строка превышает заданную длину, 
// она не должна обрезаться. Если «добивка» слишком длинная, она обрезается с конца.

const myPadStart = (string, minLength, pad) => {
  const actualPad = minLength - string.length;
  
  if(actualPad <= 0) {
    return string;
  }
  return pad.slice(0, actualPad % pad.length) + pad.repeat(actualPad / pad.length) + string;
};

// myPadStart('1', 2, '0');      // '01'

// // Добавочный символ использован три раза
// myPadStart('1', 4, '0');      // '0001'

// // Добавочные символы обрезаны с конца
// myPadStart('q', 4, 'werty');  // 'werq'

// // Добавочные символы использованы полтора раза
// myPadStart('q', 4, 'we');     // 'wweq'

// // Добавочные символы не использованы, исходная строка не изменена
// myPadStart('qwerty', 4, '0');